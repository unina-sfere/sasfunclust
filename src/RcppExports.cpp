// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_sigma
arma::mat get_sigma(arma::mat x, arma::vec curve, arma::vec time, arma::mat S, arma::mat piigivej, arma::mat gcov, arma::vec n_i, arma::cube gamma, arma::mat mu);
RcppExport SEXP _sasfunclust_get_sigma(SEXP xSEXP, SEXP curveSEXP, SEXP timeSEXP, SEXP SSEXP, SEXP piigivejSEXP, SEXP gcovSEXP, SEXP n_iSEXP, SEXP gammaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type curve(curveSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type piigivej(piigivejSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gcov(gcovSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sigma(x, curve, time, S, piigivej, gcov, n_i, gamma, mu));
    return rcpp_result_gen;
END_RCPP
}
// get_numden
List get_numden(arma::mat x, arma::vec curve, arma::vec time, arma::mat S, arma::mat piigivej, arma::mat gcov, arma::vec n_i, arma::cube gamma);
RcppExport SEXP _sasfunclust_get_numden(SEXP xSEXP, SEXP curveSEXP, SEXP timeSEXP, SEXP SSEXP, SEXP piigivejSEXP, SEXP gcovSEXP, SEXP n_iSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type curve(curveSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type piigivej(piigivejSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gcov(gcovSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_numden(x, curve, time, S, piigivej, gcov, n_i, gamma));
    return rcpp_result_gen;
END_RCPP
}
// get_Estep
List get_Estep(List par, List data, List vars, arma::mat S, bool hard, arma::vec n_i);
RcppExport SEXP _sasfunclust_get_Estep(SEXP parSEXP, SEXP dataSEXP, SEXP varsSEXP, SEXP SSEXP, SEXP hardSEXP, SEXP n_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type par(parSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type vars(varsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type hard(hardSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n_i(n_iSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Estep(par, data, vars, S, hard, n_i));
    return rcpp_result_gen;
END_RCPP
}
// norm_fdata_c
arma::mat norm_fdata_c(List v);
RcppExport SEXP _sasfunclust_norm_fdata_c(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(norm_fdata_c(v));
    return rcpp_result_gen;
END_RCPP
}
// sum_mat
double sum_mat(arma::mat x, arma::mat y, arma::mat z);
RcppExport SEXP _sasfunclust_sum_mat(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_mat(x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// wfun_c
arma::mat wfun_c(arma::mat x, int k, double ktun);
RcppExport SEXP _sasfunclust_wfun_c(SEXP xSEXP, SEXP kSEXP, SEXP ktunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type ktun(ktunSEXP);
    rcpp_result_gen = Rcpp::wrap(wfun_c(x, k, ktun));
    return rcpp_result_gen;
END_RCPP
}
// sum_fdata_c
List sum_fdata_c(List x);
RcppExport SEXP _sasfunclust_sum_fdata_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_fdata_c(x));
    return rcpp_result_gen;
END_RCPP
}
// div_fdata_c
List div_fdata_c(List x, double k);
RcppExport SEXP _sasfunclust_div_fdata_c(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(div_fdata_c(x, k));
    return rcpp_result_gen;
END_RCPP
}
// stdandar
List stdandar(List x, List mu, List sig);
RcppExport SEXP _sasfunclust_stdandar(SEXP xSEXP, SEXP muSEXP, SEXP sigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type mu(muSEXP);
    Rcpp::traits::input_parameter< List >::type sig(sigSEXP);
    rcpp_result_gen = Rcpp::wrap(stdandar(x, mu, sig));
    return rcpp_result_gen;
END_RCPP
}
// dife
arma::mat dife(arma::mat resi_new, arma::mat resi);
RcppExport SEXP _sasfunclust_dife(SEXP resi_newSEXP, SEXP resiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type resi_new(resi_newSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type resi(resiSEXP);
    rcpp_result_gen = Rcpp::wrap(dife(resi_new, resi));
    return rcpp_result_gen;
END_RCPP
}
// iteration
List iteration(List x, List mu0, List sig0, double kpsi, double ktun, double tol, int maxit);
RcppExport SEXP _sasfunclust_iteration(SEXP xSEXP, SEXP mu0SEXP, SEXP sig0SEXP, SEXP kpsiSEXP, SEXP ktunSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< List >::type sig0(sig0SEXP);
    Rcpp::traits::input_parameter< double >::type kpsi(kpsiSEXP);
    Rcpp::traits::input_parameter< double >::type ktun(ktunSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(iteration(x, mu0, sig0, kpsi, ktun, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// Mwgt_r
arma::mat Mwgt_r(arma::mat x, arma::mat cc, Rcpp::StringVector family);
RcppExport SEXP _sasfunclust_Mwgt_r(SEXP xSEXP, SEXP ccSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(Mwgt_r(x, cc, family));
    return rcpp_result_gen;
END_RCPP
}
// iteration_ho
List iteration_ho(List x, List mu0, List sig0, arma::mat cc, Rcpp::StringVector family, double tol, int maxit);
RcppExport SEXP _sasfunclust_iteration_ho(SEXP xSEXP, SEXP mu0SEXP, SEXP sig0SEXP, SEXP ccSEXP, SEXP familySEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< List >::type sig0(sig0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(iteration_ho(x, mu0, sig0, cc, family, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sasfunclust_get_sigma", (DL_FUNC) &_sasfunclust_get_sigma, 9},
    {"_sasfunclust_get_numden", (DL_FUNC) &_sasfunclust_get_numden, 8},
    {"_sasfunclust_get_Estep", (DL_FUNC) &_sasfunclust_get_Estep, 6},
    {"_sasfunclust_norm_fdata_c", (DL_FUNC) &_sasfunclust_norm_fdata_c, 1},
    {"_sasfunclust_sum_mat", (DL_FUNC) &_sasfunclust_sum_mat, 3},
    {"_sasfunclust_wfun_c", (DL_FUNC) &_sasfunclust_wfun_c, 3},
    {"_sasfunclust_sum_fdata_c", (DL_FUNC) &_sasfunclust_sum_fdata_c, 1},
    {"_sasfunclust_div_fdata_c", (DL_FUNC) &_sasfunclust_div_fdata_c, 2},
    {"_sasfunclust_stdandar", (DL_FUNC) &_sasfunclust_stdandar, 3},
    {"_sasfunclust_dife", (DL_FUNC) &_sasfunclust_dife, 2},
    {"_sasfunclust_iteration", (DL_FUNC) &_sasfunclust_iteration, 7},
    {"_sasfunclust_Mwgt_r", (DL_FUNC) &_sasfunclust_Mwgt_r, 3},
    {"_sasfunclust_iteration_ho", (DL_FUNC) &_sasfunclust_iteration_ho, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_sasfunclust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
